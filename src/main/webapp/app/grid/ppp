interface GridItem {
  x: number;
  y: number;
  w?: number;
  h?: number;
  id?: string;
  content?: string;
  subGridOpts?: SubGridOptions;
}

interface SubGridOptions {
  cellHeight: number;
  column: string;
  acceptWidgets: boolean;
  margin: number;
  subGridDynamic: boolean;
  children?: GridItem[];
}

interface MainGridOptions {
  cellHeight: number;
  margin: number;
  minRow: number;
  acceptWidgets: boolean;
  subGridOpts: SubGridOptions;
  subGridDynamic: boolean;
  children: GridItem[];
}

let subOptions: SubGridOptions = {
  cellHeight: 50, // should be 50 - top/bottom
  column: 'auto', // size to match container. make sure to include gridstack-extra.min.css
  acceptWidgets: true, // will accept .grid-stack-item by default
  margin: 5,
  subGridDynamic: true, // make it recursive for all future sub-grids
};

let main: GridItem[] = [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 0 }];
let sub1: GridItem[] = [{ x: 0, y: 0 }];
let sub0: GridItem[] = [{ x: 0, y: 0 }, { x: 1, y: 0 }];
// let sub0 = [{x:0, y:0}, {x:1, y:0}, {x:1, y:1, h:2, subGridOpts: {children: sub1, ...subOptions}}];

let options: MainGridOptions = { // main grid options
  cellHeight: 50,
  margin: 5,
  minRow: 2, // don't collapse when empty
  acceptWidgets: true,
  subGridOpts: subOptions,
  subGridDynamic: true, // v7 api to create sub-grids on the fly
  children: [
    ...main,
    { x: 2, y: 0, w: 2, h: 3, id: 'sub0', subGridOpts: { children: sub0, ...subOptions } },
    { x: 4, y: 0, h: 2, id: 'sub1', subGridOpts: { children: sub1, ...subOptions } },
    // {x:2, y:0, w:2, h:3, subGridOpts: {children: [...sub1, {x:0, y:1, subGridOpts: subOptions}], ...subOptions}/*,content: "<div>nested grid here</div>"*/},
  ]
};

let count = 0;
// create unique ids+content so we can incrementally load() and not re-create anything (updates)
[...main, ...sub0, ...sub1].forEach(d => {
  d.id = String(count++);
  d.content = d.id;
});

this.grid = GridStack.init();
this.grid.addWidget(options);
